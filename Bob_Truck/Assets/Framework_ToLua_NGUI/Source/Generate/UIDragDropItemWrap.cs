//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIDragDropItemWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIDragDropItem), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("StartDragging", StartDragging);
		L.RegFunction("StopDragging", StopDragging);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_parentPanel", get_m_parentPanel, set_m_parentPanel);
		L.RegVar("m_notificationKey", get_m_notificationKey, set_m_notificationKey);
		L.RegVar("restriction", get_restriction, set_restriction);
		L.RegVar("m_index", get_m_index, set_m_index);
		L.RegVar("cloneOnDrag", get_cloneOnDrag, set_cloneOnDrag);
		L.RegVar("pressAndHoldDelay", get_pressAndHoldDelay, set_pressAndHoldDelay);
		L.RegVar("interactable", get_interactable, set_interactable);
		L.RegVar("draggedItems", get_draggedItems, set_draggedItems);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartDragging(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIDragDropItem obj = (UIDragDropItem)ToLua.CheckObject<UIDragDropItem>(L, 1);
			obj.StartDragging();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopDragging(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UIDragDropItem obj = (UIDragDropItem)ToLua.CheckObject<UIDragDropItem>(L, 1);
				obj.StopDragging();
				return 0;
			}
			else if (count == 2)
			{
				UIDragDropItem obj = (UIDragDropItem)ToLua.CheckObject<UIDragDropItem>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.StopDragging(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIDragDropItem.StopDragging");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_parentPanel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			UnityEngine.Transform ret = obj.m_parentPanel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_parentPanel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_notificationKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			string ret = obj.m_notificationKey;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_notificationKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_restriction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			UIDragDropItem.Restriction ret = obj.restriction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index restriction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_index(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			int ret = obj.m_index;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_index on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cloneOnDrag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			bool ret = obj.cloneOnDrag;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cloneOnDrag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pressAndHoldDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			float ret = obj.pressAndHoldDelay;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pressAndHoldDelay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_interactable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			bool ret = obj.interactable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index interactable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_draggedItems(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UIDragDropItem.draggedItems);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_parentPanel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.m_parentPanel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_parentPanel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_notificationKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.m_notificationKey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_notificationKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_restriction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			UIDragDropItem.Restriction arg0 = (UIDragDropItem.Restriction)ToLua.CheckObject(L, 2, typeof(UIDragDropItem.Restriction));
			obj.restriction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index restriction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_index(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_index = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_index on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cloneOnDrag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.cloneOnDrag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cloneOnDrag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pressAndHoldDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pressAndHoldDelay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pressAndHoldDelay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interactable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIDragDropItem obj = (UIDragDropItem)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.interactable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index interactable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_draggedItems(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<UIDragDropItem> arg0 = (System.Collections.Generic.List<UIDragDropItem>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UIDragDropItem>));
			UIDragDropItem.draggedItems = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

