//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UICameraWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UICamera), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("IsPartOfUI", IsPartOfUI);
		L.RegFunction("IsPressed", IsPressed);
		L.RegFunction("CountInputSources", CountInputSources);
		L.RegFunction("Raycast", Raycast);
		L.RegFunction("IsHighlighted", IsHighlighted);
		L.RegFunction("FindCameraForLayer", FindCameraForLayer);
		L.RegFunction("Notify", Notify);
		L.RegFunction("ProcessMouse", ProcessMouse);
		L.RegFunction("ProcessTouches", ProcessTouches);
		L.RegFunction("ProcessOthers", ProcessOthers);
		L.RegFunction("ProcessTouch", ProcessTouch);
		L.RegFunction("CancelNextTooltip", CancelNextTooltip);
		L.RegFunction("ShowTooltip", ShowTooltip);
		L.RegFunction("HideTooltip", HideTooltip);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("list", get_list, set_list);
		L.RegVar("GetKeyDown", get_GetKeyDown, set_GetKeyDown);
		L.RegVar("GetKeyUp", get_GetKeyUp, set_GetKeyUp);
		L.RegVar("GetKey", get_GetKey, set_GetKey);
		L.RegVar("GetAxis", get_GetAxis, set_GetAxis);
		L.RegVar("GetAnyKeyDown", get_GetAnyKeyDown, set_GetAnyKeyDown);
		L.RegVar("GetMouse", get_GetMouse, set_GetMouse);
		L.RegVar("GetTouch", get_GetTouch, set_GetTouch);
		L.RegVar("RemoveTouch", get_RemoveTouch, set_RemoveTouch);
		L.RegVar("onScreenResize", get_onScreenResize, set_onScreenResize);
		L.RegVar("eventType", get_eventType, set_eventType);
		L.RegVar("eventsGoToColliders", get_eventsGoToColliders, set_eventsGoToColliders);
		L.RegVar("eventReceiverMask", get_eventReceiverMask, set_eventReceiverMask);
		L.RegVar("processEventsIn", get_processEventsIn, set_processEventsIn);
		L.RegVar("debug", get_debug, set_debug);
		L.RegVar("useMouse", get_useMouse, set_useMouse);
		L.RegVar("useTouch", get_useTouch, set_useTouch);
		L.RegVar("allowMultiTouch", get_allowMultiTouch, set_allowMultiTouch);
		L.RegVar("useKeyboard", get_useKeyboard, set_useKeyboard);
		L.RegVar("useController", get_useController, set_useController);
		L.RegVar("stickyTooltip", get_stickyTooltip, set_stickyTooltip);
		L.RegVar("tooltipDelay", get_tooltipDelay, set_tooltipDelay);
		L.RegVar("longPressTooltip", get_longPressTooltip, set_longPressTooltip);
		L.RegVar("mouseDragThreshold", get_mouseDragThreshold, set_mouseDragThreshold);
		L.RegVar("mouseClickThreshold", get_mouseClickThreshold, set_mouseClickThreshold);
		L.RegVar("touchDragThreshold", get_touchDragThreshold, set_touchDragThreshold);
		L.RegVar("touchClickThreshold", get_touchClickThreshold, set_touchClickThreshold);
		L.RegVar("rangeDistance", get_rangeDistance, set_rangeDistance);
		L.RegVar("horizontalAxisName", get_horizontalAxisName, set_horizontalAxisName);
		L.RegVar("verticalAxisName", get_verticalAxisName, set_verticalAxisName);
		L.RegVar("horizontalPanAxisName", get_horizontalPanAxisName, set_horizontalPanAxisName);
		L.RegVar("verticalPanAxisName", get_verticalPanAxisName, set_verticalPanAxisName);
		L.RegVar("scrollAxisName", get_scrollAxisName, set_scrollAxisName);
		L.RegVar("commandClick", get_commandClick, set_commandClick);
		L.RegVar("submitKey0", get_submitKey0, set_submitKey0);
		L.RegVar("submitKey1", get_submitKey1, set_submitKey1);
		L.RegVar("cancelKey0", get_cancelKey0, set_cancelKey0);
		L.RegVar("cancelKey1", get_cancelKey1, set_cancelKey1);
		L.RegVar("autoHideCursor", get_autoHideCursor, set_autoHideCursor);
		L.RegVar("onCustomInput", get_onCustomInput, set_onCustomInput);
		L.RegVar("showTooltips", get_showTooltips, set_showTooltips);
		L.RegVar("ignoreAllEvents", get_ignoreAllEvents, set_ignoreAllEvents);
		L.RegVar("ignoreControllerInput", get_ignoreControllerInput, set_ignoreControllerInput);
		L.RegVar("lastWorldPosition", get_lastWorldPosition, set_lastWorldPosition);
		L.RegVar("lastWorldRay", get_lastWorldRay, set_lastWorldRay);
		L.RegVar("lastHit", get_lastHit, set_lastHit);
		L.RegVar("current", get_current, set_current);
		L.RegVar("currentCamera", get_currentCamera, set_currentCamera);
		L.RegVar("onSchemeChange", get_onSchemeChange, set_onSchemeChange);
		L.RegVar("currentTouchID", get_currentTouchID, set_currentTouchID);
		L.RegVar("currentTouch", get_currentTouch, set_currentTouch);
		L.RegVar("fallThrough", get_fallThrough, set_fallThrough);
		L.RegVar("onClick", get_onClick, set_onClick);
		L.RegVar("onDoubleClick", get_onDoubleClick, set_onDoubleClick);
		L.RegVar("onHover", get_onHover, set_onHover);
		L.RegVar("onPress", get_onPress, set_onPress);
		L.RegVar("onSelect", get_onSelect, set_onSelect);
		L.RegVar("onScroll", get_onScroll, set_onScroll);
		L.RegVar("onDrag", get_onDrag, set_onDrag);
		L.RegVar("onDragStart", get_onDragStart, set_onDragStart);
		L.RegVar("onDragOver", get_onDragOver, set_onDragOver);
		L.RegVar("onDragOut", get_onDragOut, set_onDragOut);
		L.RegVar("onDragEnd", get_onDragEnd, set_onDragEnd);
		L.RegVar("onDrop", get_onDrop, set_onDrop);
		L.RegVar("onKey", get_onKey, set_onKey);
		L.RegVar("onNavigate", get_onNavigate, set_onNavigate);
		L.RegVar("onPan", get_onPan, set_onPan);
		L.RegVar("onTooltip", get_onTooltip, set_onTooltip);
		L.RegVar("onMouseMove", get_onMouseMove, set_onMouseMove);
		L.RegVar("controller", get_controller, set_controller);
		L.RegVar("activeTouches", get_activeTouches, set_activeTouches);
		L.RegVar("isDragging", get_isDragging, set_isDragging);
		L.RegVar("GetInputTouchCount", get_GetInputTouchCount, set_GetInputTouchCount);
		L.RegVar("GetInputTouch", get_GetInputTouch, set_GetInputTouch);
		L.RegVar("disableController", get_disableController, set_disableController);
		L.RegVar("lastEventPosition", get_lastEventPosition, set_lastEventPosition);
		L.RegVar("first", get_first, null);
		L.RegVar("currentScheme", get_currentScheme, set_currentScheme);
		L.RegVar("currentKey", get_currentKey, set_currentKey);
		L.RegVar("currentRay", get_currentRay, null);
		L.RegVar("inputHasFocus", get_inputHasFocus, null);
		L.RegVar("mouse0", get_mouse0, null);
		L.RegVar("mouse1", get_mouse1, null);
		L.RegVar("mouse2", get_mouse2, null);
		L.RegVar("cachedCamera", get_cachedCamera, null);
		L.RegVar("tooltipObject", get_tooltipObject, null);
		L.RegVar("isOverUI", get_isOverUI, null);
		L.RegVar("uiHasFocus", get_uiHasFocus, null);
		L.RegVar("interactingWithUI", get_interactingWithUI, null);
		L.RegVar("hoveredObject", get_hoveredObject, set_hoveredObject);
		L.RegVar("controllerNavigationObject", get_controllerNavigationObject, set_controllerNavigationObject);
		L.RegVar("selectedObject", get_selectedObject, set_selectedObject);
		L.RegVar("dragCount", get_dragCount, null);
		L.RegVar("mainCamera", get_mainCamera, null);
		L.RegVar("eventHandler", get_eventHandler, null);
		L.RegFunction("GetTouchCallback", UICamera_GetTouchCallback);
		L.RegFunction("GetTouchCountCallback", UICamera_GetTouchCountCallback);
		L.RegFunction("MoveDelegate", UICamera_MoveDelegate);
		L.RegFunction("BoolDelegate", UICamera_BoolDelegate);
		L.RegFunction("VectorDelegate", UICamera_VectorDelegate);
		L.RegFunction("KeyCodeDelegate", UICamera_KeyCodeDelegate);
		L.RegFunction("ObjectDelegate", UICamera_ObjectDelegate);
		L.RegFunction("VoidDelegate", UICamera_VoidDelegate);
		L.RegFunction("FloatDelegate", UICamera_FloatDelegate);
		L.RegFunction("OnSchemeChange", UICamera_OnSchemeChange);
		L.RegFunction("OnCustomInput", UICamera_OnCustomInput);
		L.RegFunction("OnScreenResize", UICamera_OnScreenResize);
		L.RegFunction("RemoveTouchDelegate", UICamera_RemoveTouchDelegate);
		L.RegFunction("GetTouchDelegate", UICamera_GetTouchDelegate);
		L.RegFunction("GetMouseDelegate", UICamera_GetMouseDelegate);
		L.RegFunction("GetAnyKeyFunc", UICamera_GetAnyKeyFunc);
		L.RegFunction("GetAxisFunc", UICamera_GetAxisFunc);
		L.RegFunction("GetKeyStateFunc", UICamera_GetKeyStateFunc);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPartOfUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			bool o = UICamera.IsPartOfUI(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPressed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			bool o = UICamera.IsPressed(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CountInputSources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UICamera.CountInputSources();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				bool o = UICamera.Raycast(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UICamera.MouseOrTouch>(L, 1))
			{
				UICamera.MouseOrTouch arg0 = (UICamera.MouseOrTouch)ToLua.ToObject(L, 1);
				UICamera.Raycast(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UICamera.Raycast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsHighlighted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			bool o = UICamera.IsHighlighted(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindCameraForLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UICamera o = UICamera.FindCameraForLayer(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Notify(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 2);
			object arg2 = ToLua.ToVarObject(L, 3);
			UICamera.Notify(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ProcessMouse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UICamera obj = (UICamera)ToLua.CheckObject<UICamera>(L, 1);
			obj.ProcessMouse();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ProcessTouches(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UICamera obj = (UICamera)ToLua.CheckObject<UICamera>(L, 1);
			obj.ProcessTouches();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ProcessOthers(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UICamera obj = (UICamera)ToLua.CheckObject<UICamera>(L, 1);
			obj.ProcessOthers();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ProcessTouch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UICamera obj = (UICamera)ToLua.CheckObject<UICamera>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.ProcessTouch(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelNextTooltip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UICamera.CancelNextTooltip();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowTooltip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			bool o = UICamera.ShowTooltip(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideTooltip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = UICamera.HideTooltip();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_list(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UICamera.list);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetKeyDown(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetKeyDown);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetKeyUp(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetKeyUp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetKey(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetAxis(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetAxis);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetAnyKeyDown(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetAnyKeyDown);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetMouse(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetMouse);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetTouch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetTouch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RemoveTouch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.RemoveTouch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onScreenResize(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onScreenResize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eventType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UICamera.EventType ret = obj.eventType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eventsGoToColliders(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.eventsGoToColliders;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventsGoToColliders on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eventReceiverMask(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.LayerMask ret = obj.eventReceiverMask;
			ToLua.PushLayerMask(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventReceiverMask on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_processEventsIn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UICamera.ProcessEventsIn ret = obj.processEventsIn;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index processEventsIn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debug(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.debug;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debug on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useMouse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.useMouse;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMouse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.useTouch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_allowMultiTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.allowMultiTouch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index allowMultiTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useKeyboard(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.useKeyboard;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useKeyboard on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.useController;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_stickyTooltip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.stickyTooltip;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index stickyTooltip on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tooltipDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float ret = obj.tooltipDelay;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tooltipDelay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_longPressTooltip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.longPressTooltip;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index longPressTooltip on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mouseDragThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float ret = obj.mouseDragThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mouseDragThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mouseClickThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float ret = obj.mouseClickThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mouseClickThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_touchDragThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float ret = obj.touchDragThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchDragThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_touchClickThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float ret = obj.touchClickThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchClickThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rangeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float ret = obj.rangeDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rangeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_horizontalAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string ret = obj.horizontalAxisName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index horizontalAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_verticalAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string ret = obj.verticalAxisName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verticalAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_horizontalPanAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string ret = obj.horizontalPanAxisName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index horizontalPanAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_verticalPanAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string ret = obj.verticalPanAxisName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verticalPanAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scrollAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string ret = obj.scrollAxisName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scrollAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_commandClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.commandClick;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index commandClick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_submitKey0(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode ret = obj.submitKey0;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index submitKey0 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_submitKey1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode ret = obj.submitKey1;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index submitKey1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cancelKey0(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode ret = obj.cancelKey0;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cancelKey0 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cancelKey1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode ret = obj.cancelKey1;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cancelKey1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoHideCursor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool ret = obj.autoHideCursor;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoHideCursor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCustomInput(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onCustomInput);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showTooltips(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.showTooltips);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ignoreAllEvents(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.ignoreAllEvents);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ignoreControllerInput(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.ignoreControllerInput);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastWorldPosition(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.lastWorldPosition);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastWorldRay(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.lastWorldRay);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastHit(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.lastHit);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_current(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.current);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentCamera(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.currentCamera);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSchemeChange(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onSchemeChange);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentTouchID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UICamera.currentTouchID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentTouch(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UICamera.currentTouch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fallThrough(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.fallThrough);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onClick(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onClick);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDoubleClick(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onDoubleClick);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onHover(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onHover);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPress(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onPress);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSelect(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onSelect);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onScroll(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onScroll);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDrag(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onDrag);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDragStart(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onDragStart);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDragOver(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onDragOver);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDragOut(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onDragOut);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDragEnd(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onDragEnd);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDrop(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onDrop);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onKey(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onNavigate(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onNavigate);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPan(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onPan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onTooltip(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onTooltip);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onMouseMove(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.onMouseMove);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_controller(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UICamera.controller);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_activeTouches(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.activeTouches);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isDragging(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.isDragging);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetInputTouchCount(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetInputTouchCount);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetInputTouch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.GetInputTouch);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_disableController(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.disableController);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastEventPosition(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.lastEventPosition);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_first(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.first);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentScheme(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.currentScheme);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentKey(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.currentKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentRay(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.currentRay);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inputHasFocus(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.inputHasFocus);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mouse0(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UICamera.mouse0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mouse1(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UICamera.mouse1);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mouse2(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UICamera.mouse2);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cachedCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.Camera ret = obj.cachedCamera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cachedCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tooltipObject(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.tooltipObject);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOverUI(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.isOverUI);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uiHasFocus(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.uiHasFocus);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_interactingWithUI(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UICamera.interactingWithUI);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hoveredObject(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.hoveredObject);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_controllerNavigationObject(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.controllerNavigationObject);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selectedObject(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.selectedObject);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dragCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UICamera.dragCount);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mainCamera(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UICamera.mainCamera);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eventHandler(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UICamera.eventHandler);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_list(IntPtr L)
	{
		try
		{
			BetterList<UICamera> arg0 = (BetterList<UICamera>)ToLua.CheckObject<BetterList<UICamera>>(L, 2);
			UICamera.list = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetKeyDown(IntPtr L)
	{
		try
		{
			UICamera.GetKeyStateFunc arg0 = (UICamera.GetKeyStateFunc)ToLua.CheckDelegate<UICamera.GetKeyStateFunc>(L, 2);
			UICamera.GetKeyDown = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetKeyUp(IntPtr L)
	{
		try
		{
			UICamera.GetKeyStateFunc arg0 = (UICamera.GetKeyStateFunc)ToLua.CheckDelegate<UICamera.GetKeyStateFunc>(L, 2);
			UICamera.GetKeyUp = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetKey(IntPtr L)
	{
		try
		{
			UICamera.GetKeyStateFunc arg0 = (UICamera.GetKeyStateFunc)ToLua.CheckDelegate<UICamera.GetKeyStateFunc>(L, 2);
			UICamera.GetKey = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetAxis(IntPtr L)
	{
		try
		{
			UICamera.GetAxisFunc arg0 = (UICamera.GetAxisFunc)ToLua.CheckDelegate<UICamera.GetAxisFunc>(L, 2);
			UICamera.GetAxis = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetAnyKeyDown(IntPtr L)
	{
		try
		{
			UICamera.GetAnyKeyFunc arg0 = (UICamera.GetAnyKeyFunc)ToLua.CheckDelegate<UICamera.GetAnyKeyFunc>(L, 2);
			UICamera.GetAnyKeyDown = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetMouse(IntPtr L)
	{
		try
		{
			UICamera.GetMouseDelegate arg0 = (UICamera.GetMouseDelegate)ToLua.CheckDelegate<UICamera.GetMouseDelegate>(L, 2);
			UICamera.GetMouse = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetTouch(IntPtr L)
	{
		try
		{
			UICamera.GetTouchDelegate arg0 = (UICamera.GetTouchDelegate)ToLua.CheckDelegate<UICamera.GetTouchDelegate>(L, 2);
			UICamera.GetTouch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RemoveTouch(IntPtr L)
	{
		try
		{
			UICamera.RemoveTouchDelegate arg0 = (UICamera.RemoveTouchDelegate)ToLua.CheckDelegate<UICamera.RemoveTouchDelegate>(L, 2);
			UICamera.RemoveTouch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onScreenResize(IntPtr L)
	{
		try
		{
			UICamera.OnScreenResize arg0 = (UICamera.OnScreenResize)ToLua.CheckDelegate<UICamera.OnScreenResize>(L, 2);
			UICamera.onScreenResize = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_eventType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UICamera.EventType arg0 = (UICamera.EventType)ToLua.CheckObject(L, 2, typeof(UICamera.EventType));
			obj.eventType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_eventsGoToColliders(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.eventsGoToColliders = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventsGoToColliders on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_eventReceiverMask(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.LayerMask arg0 = ToLua.ToLayerMask(L, 2);
			obj.eventReceiverMask = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventReceiverMask on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_processEventsIn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UICamera.ProcessEventsIn arg0 = (UICamera.ProcessEventsIn)ToLua.CheckObject(L, 2, typeof(UICamera.ProcessEventsIn));
			obj.processEventsIn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index processEventsIn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debug(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.debug = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debug on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useMouse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useMouse = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMouse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useTouch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_allowMultiTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.allowMultiTouch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index allowMultiTouch on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useKeyboard(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useKeyboard = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useKeyboard on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_stickyTooltip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.stickyTooltip = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index stickyTooltip on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tooltipDelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.tooltipDelay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tooltipDelay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_longPressTooltip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.longPressTooltip = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index longPressTooltip on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mouseDragThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mouseDragThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mouseDragThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mouseClickThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mouseClickThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mouseClickThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_touchDragThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.touchDragThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchDragThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_touchClickThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.touchClickThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index touchClickThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rangeDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.rangeDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rangeDistance on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_horizontalAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.horizontalAxisName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index horizontalAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_verticalAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.verticalAxisName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verticalAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_horizontalPanAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.horizontalPanAxisName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index horizontalPanAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_verticalPanAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.verticalPanAxisName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verticalPanAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scrollAxisName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.scrollAxisName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scrollAxisName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_commandClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.commandClick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index commandClick on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_submitKey0(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
			obj.submitKey0 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index submitKey0 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_submitKey1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
			obj.submitKey1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index submitKey1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cancelKey0(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
			obj.cancelKey0 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cancelKey0 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cancelKey1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
			obj.cancelKey1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cancelKey1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoHideCursor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICamera obj = (UICamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.autoHideCursor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoHideCursor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCustomInput(IntPtr L)
	{
		try
		{
			UICamera.OnCustomInput arg0 = (UICamera.OnCustomInput)ToLua.CheckDelegate<UICamera.OnCustomInput>(L, 2);
			UICamera.onCustomInput = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showTooltips(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UICamera.showTooltips = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ignoreAllEvents(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UICamera.ignoreAllEvents = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ignoreControllerInput(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UICamera.ignoreControllerInput = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastWorldPosition(IntPtr L)
	{
		try
		{
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UICamera.lastWorldPosition = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastWorldRay(IntPtr L)
	{
		try
		{
			UnityEngine.Ray arg0 = ToLua.ToRay(L, 2);
			UICamera.lastWorldRay = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastHit(IntPtr L)
	{
		try
		{
			UnityEngine.RaycastHit arg0 = StackTraits<UnityEngine.RaycastHit>.Check(L, 2);
			UICamera.lastHit = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_current(IntPtr L)
	{
		try
		{
			UICamera arg0 = (UICamera)ToLua.CheckObject<UICamera>(L, 2);
			UICamera.current = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentCamera(IntPtr L)
	{
		try
		{
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 2, typeof(UnityEngine.Camera));
			UICamera.currentCamera = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSchemeChange(IntPtr L)
	{
		try
		{
			UICamera.OnSchemeChange arg0 = (UICamera.OnSchemeChange)ToLua.CheckDelegate<UICamera.OnSchemeChange>(L, 2);
			UICamera.onSchemeChange = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentTouchID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UICamera.currentTouchID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentTouch(IntPtr L)
	{
		try
		{
			UICamera.MouseOrTouch arg0 = (UICamera.MouseOrTouch)ToLua.CheckObject<UICamera.MouseOrTouch>(L, 2);
			UICamera.currentTouch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fallThrough(IntPtr L)
	{
		try
		{
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UICamera.fallThrough = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onClick(IntPtr L)
	{
		try
		{
			UICamera.VoidDelegate arg0 = (UICamera.VoidDelegate)ToLua.CheckDelegate<UICamera.VoidDelegate>(L, 2);
			UICamera.onClick = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDoubleClick(IntPtr L)
	{
		try
		{
			UICamera.VoidDelegate arg0 = (UICamera.VoidDelegate)ToLua.CheckDelegate<UICamera.VoidDelegate>(L, 2);
			UICamera.onDoubleClick = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onHover(IntPtr L)
	{
		try
		{
			UICamera.BoolDelegate arg0 = (UICamera.BoolDelegate)ToLua.CheckDelegate<UICamera.BoolDelegate>(L, 2);
			UICamera.onHover = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPress(IntPtr L)
	{
		try
		{
			UICamera.BoolDelegate arg0 = (UICamera.BoolDelegate)ToLua.CheckDelegate<UICamera.BoolDelegate>(L, 2);
			UICamera.onPress = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSelect(IntPtr L)
	{
		try
		{
			UICamera.BoolDelegate arg0 = (UICamera.BoolDelegate)ToLua.CheckDelegate<UICamera.BoolDelegate>(L, 2);
			UICamera.onSelect = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onScroll(IntPtr L)
	{
		try
		{
			UICamera.FloatDelegate arg0 = (UICamera.FloatDelegate)ToLua.CheckDelegate<UICamera.FloatDelegate>(L, 2);
			UICamera.onScroll = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDrag(IntPtr L)
	{
		try
		{
			UICamera.VectorDelegate arg0 = (UICamera.VectorDelegate)ToLua.CheckDelegate<UICamera.VectorDelegate>(L, 2);
			UICamera.onDrag = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDragStart(IntPtr L)
	{
		try
		{
			UICamera.VoidDelegate arg0 = (UICamera.VoidDelegate)ToLua.CheckDelegate<UICamera.VoidDelegate>(L, 2);
			UICamera.onDragStart = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDragOver(IntPtr L)
	{
		try
		{
			UICamera.ObjectDelegate arg0 = (UICamera.ObjectDelegate)ToLua.CheckDelegate<UICamera.ObjectDelegate>(L, 2);
			UICamera.onDragOver = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDragOut(IntPtr L)
	{
		try
		{
			UICamera.ObjectDelegate arg0 = (UICamera.ObjectDelegate)ToLua.CheckDelegate<UICamera.ObjectDelegate>(L, 2);
			UICamera.onDragOut = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDragEnd(IntPtr L)
	{
		try
		{
			UICamera.VoidDelegate arg0 = (UICamera.VoidDelegate)ToLua.CheckDelegate<UICamera.VoidDelegate>(L, 2);
			UICamera.onDragEnd = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDrop(IntPtr L)
	{
		try
		{
			UICamera.ObjectDelegate arg0 = (UICamera.ObjectDelegate)ToLua.CheckDelegate<UICamera.ObjectDelegate>(L, 2);
			UICamera.onDrop = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onKey(IntPtr L)
	{
		try
		{
			UICamera.KeyCodeDelegate arg0 = (UICamera.KeyCodeDelegate)ToLua.CheckDelegate<UICamera.KeyCodeDelegate>(L, 2);
			UICamera.onKey = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onNavigate(IntPtr L)
	{
		try
		{
			UICamera.KeyCodeDelegate arg0 = (UICamera.KeyCodeDelegate)ToLua.CheckDelegate<UICamera.KeyCodeDelegate>(L, 2);
			UICamera.onNavigate = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPan(IntPtr L)
	{
		try
		{
			UICamera.VectorDelegate arg0 = (UICamera.VectorDelegate)ToLua.CheckDelegate<UICamera.VectorDelegate>(L, 2);
			UICamera.onPan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onTooltip(IntPtr L)
	{
		try
		{
			UICamera.BoolDelegate arg0 = (UICamera.BoolDelegate)ToLua.CheckDelegate<UICamera.BoolDelegate>(L, 2);
			UICamera.onTooltip = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onMouseMove(IntPtr L)
	{
		try
		{
			UICamera.MoveDelegate arg0 = (UICamera.MoveDelegate)ToLua.CheckDelegate<UICamera.MoveDelegate>(L, 2);
			UICamera.onMouseMove = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_controller(IntPtr L)
	{
		try
		{
			UICamera.MouseOrTouch arg0 = (UICamera.MouseOrTouch)ToLua.CheckObject<UICamera.MouseOrTouch>(L, 2);
			UICamera.controller = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_activeTouches(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<UICamera.MouseOrTouch> arg0 = (System.Collections.Generic.List<UICamera.MouseOrTouch>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UICamera.MouseOrTouch>));
			UICamera.activeTouches = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isDragging(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UICamera.isDragging = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetInputTouchCount(IntPtr L)
	{
		try
		{
			UICamera.GetTouchCountCallback arg0 = (UICamera.GetTouchCountCallback)ToLua.CheckDelegate<UICamera.GetTouchCountCallback>(L, 2);
			UICamera.GetInputTouchCount = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetInputTouch(IntPtr L)
	{
		try
		{
			UICamera.GetTouchCallback arg0 = (UICamera.GetTouchCallback)ToLua.CheckDelegate<UICamera.GetTouchCallback>(L, 2);
			UICamera.GetInputTouch = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_disableController(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UICamera.disableController = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastEventPosition(IntPtr L)
	{
		try
		{
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			UICamera.lastEventPosition = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentScheme(IntPtr L)
	{
		try
		{
			UICamera.ControlScheme arg0 = (UICamera.ControlScheme)ToLua.CheckObject(L, 2, typeof(UICamera.ControlScheme));
			UICamera.currentScheme = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentKey(IntPtr L)
	{
		try
		{
			UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
			UICamera.currentKey = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hoveredObject(IntPtr L)
	{
		try
		{
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UICamera.hoveredObject = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_controllerNavigationObject(IntPtr L)
	{
		try
		{
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UICamera.controllerNavigationObject = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_selectedObject(IntPtr L)
	{
		try
		{
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UICamera.selectedObject = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_GetTouchCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.GetTouchCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.GetTouchCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_GetTouchCountCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.GetTouchCountCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.GetTouchCountCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_MoveDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.MoveDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.MoveDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_BoolDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.BoolDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.BoolDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_VectorDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.VectorDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.VectorDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_KeyCodeDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.KeyCodeDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.KeyCodeDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_ObjectDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.ObjectDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.ObjectDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_VoidDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.VoidDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.VoidDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_FloatDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.FloatDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.FloatDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_OnSchemeChange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.OnSchemeChange>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.OnSchemeChange>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_OnCustomInput(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.OnCustomInput>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.OnCustomInput>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_OnScreenResize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.OnScreenResize>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.OnScreenResize>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_RemoveTouchDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.RemoveTouchDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.RemoveTouchDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_GetTouchDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.GetTouchDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.GetTouchDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_GetMouseDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.GetMouseDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.GetMouseDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_GetAnyKeyFunc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.GetAnyKeyFunc>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.GetAnyKeyFunc>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_GetAxisFunc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.GetAxisFunc>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.GetAxisFunc>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICamera_GetKeyStateFunc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICamera.GetKeyStateFunc>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICamera.GetKeyStateFunc>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

