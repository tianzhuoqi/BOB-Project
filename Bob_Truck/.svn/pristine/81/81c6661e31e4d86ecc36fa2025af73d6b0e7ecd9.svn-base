//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NAbstractResourceLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NAbstractResourceLoader), typeof(System.Object));
		L.RegFunction("CheckGcCollect", CheckGcCollect);
		L.RegFunction("Release", Release);
		L.RegFunction("ForceDispose", ForceDispose);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("InitTiming", get_InitTiming, set_InitTiming);
		L.RegVar("FinishTiming", get_FinishTiming, set_FinishTiming);
		L.RegVar("GcIntervalTime", get_GcIntervalTime, null);
		L.RegVar("ResultObject", get_ResultObject, null);
		L.RegVar("IsCompleted", get_IsCompleted, null);
		L.RegVar("IsError", get_IsError, null);
		L.RegVar("AsyncMessage", get_AsyncMessage, null);
		L.RegVar("AsyncResult", get_AsyncResult, null);
		L.RegVar("IsSuccess", get_IsSuccess, null);
		L.RegVar("FinishUsedTime", get_FinishUsedTime, null);
		L.RegVar("RefCount", get_RefCount, null);
		L.RegVar("Url", get_Url, null);
		L.RegVar("Progress", get_Progress, null);
		L.RegVar("Desc", get_Desc, set_Desc);
		L.RegVar("DisposeEvent", get_DisposeEvent, set_DisposeEvent);
		L.RegVar("SetDescEvent", get_SetDescEvent, set_SetDescEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckGcCollect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NAbstractResourceLoader.CheckGcCollect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				NAbstractResourceLoader obj = (NAbstractResourceLoader)ToLua.CheckObject<NAbstractResourceLoader>(L, 1);
				obj.Release();
				return 0;
			}
			else if (count == 2)
			{
				NAbstractResourceLoader obj = (NAbstractResourceLoader)ToLua.CheckObject<NAbstractResourceLoader>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Release(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NAbstractResourceLoader.Release");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceDispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)ToLua.CheckObject<NAbstractResourceLoader>(L, 1);
			obj.ForceDispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InitTiming(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			float ret = obj.InitTiming;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InitTiming on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FinishTiming(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			float ret = obj.FinishTiming;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FinishTiming on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GcIntervalTime(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NAbstractResourceLoader.GcIntervalTime);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResultObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			object ret = obj.ResultObject;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResultObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsCompleted(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			bool ret = obj.IsCompleted;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsCompleted on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			bool ret = obj.IsError;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsyncMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			string ret = obj.AsyncMessage;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsyncMessage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AsyncResult(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			object ret = obj.AsyncResult;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AsyncResult on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSuccess(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			bool ret = obj.IsSuccess;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSuccess on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FinishUsedTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			float ret = obj.FinishUsedTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FinishUsedTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RefCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			int ret = obj.RefCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RefCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			string ret = obj.Url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Desc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			string ret = obj.Desc;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Desc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DisposeEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SetDescEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<string>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InitTiming(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.InitTiming = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InitTiming on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FinishTiming(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.FinishTiming = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FinishTiming on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Desc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NAbstractResourceLoader obj = (NAbstractResourceLoader)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Desc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Desc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DisposeEvent(IntPtr L)
	{
		try
		{
			NAbstractResourceLoader obj = (NAbstractResourceLoader)ToLua.CheckObject(L, 1, typeof(NAbstractResourceLoader));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'NAbstractResourceLoader.DisposeEvent' can only appear on the left hand side of += or -= when used outside of the type 'NAbstractResourceLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.DisposeEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)arg0.func;
				obj.DisposeEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SetDescEvent(IntPtr L)
	{
		try
		{
			NAbstractResourceLoader obj = (NAbstractResourceLoader)ToLua.CheckObject(L, 1, typeof(NAbstractResourceLoader));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'NAbstractResourceLoader.SetDescEvent' can only appear on the left hand side of += or -= when used outside of the type 'NAbstractResourceLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				obj.SetDescEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<string> ev = (System.Action<string>)arg0.func;
				obj.SetDescEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

