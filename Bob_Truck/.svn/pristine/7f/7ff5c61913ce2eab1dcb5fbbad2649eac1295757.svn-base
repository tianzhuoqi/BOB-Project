local ListItem = require("Game/Module/UICommon/ListItem")

local BuildingListListItem = register("BuildingListListItem", ListItem)

function BuildingListListItem:Awake(gameObject)
    BuildingListListItem.super.Awake(self, gameObject)

    self.planetaryProxy = Facade:RetrieveProxy(NotiConst.Proxy_Planetary)
    self.storehouseProxy = Facade:RetrieveProxy(NotiConst.Proxy_Storehouse)

    self.n_BackMsg = self:FindGameObject("n_BackMsg")
    self.n_Sprite_BakRsB = self:FindComponent("n_BackMsg/n_Sprite_BakRsB", "UISprite")
    self.n_Label_Money = self:FindComponent("n_BackMsg/n_Label_Money", "UILabel")
    self.n_Sprite_Money = self:FindComponent("n_BackMsg/n_Label_Money/n_Sprite_Money", "UISprite")
    self.n_Label_DzName01 = self:FindComponent("n_BackMsg/n_Label_DzName01", "UILabel")
    self.n_Label_Num01 = self:FindComponent("n_BackMsg/n_Label_DzName01/n_Label_Num01", "UILabel")
    self.n_Label_DzName02 = self:FindComponent("n_BackMsg/n_Label_DzName02", "UILabel")
    self.n_Label_Num02 = self:FindComponent("n_BackMsg/n_Label_DzName02/n_Label_Num02", "UILabel")
    self.n_Label_DzName03 = self:FindComponent("n_BackMsg/n_Label_DzName03", "UILabel")
    self.n_Label_Num03 = self:FindComponent("n_BackMsg/n_Label_DzName03/n_Label_Num03", "UILabel")
    self.n_Label_DzName04 = self:FindComponent("n_BackMsg/n_Label_DzName04", "UILabel")
    self.n_Label_Num04 = self:FindComponent("n_BackMsg/n_Label_DzName04/n_Label_Num04", "UILabel")
    self.n_Label_DzName05 = self:FindComponent("n_BackMsg/n_Label_DzName05", "UILabel")
    self.n_Label_Num05 = self:FindComponent("n_BackMsg/n_Label_DzName05/n_Label_Num05", "UILabel")
    self.n_Label_Details01 = self:FindComponent("n_BackMsg/n_Label_Details01", "UILabel")
    self.n_FrontMsg = self:FindGameObject("n_FrontMsg")
    self.n_Texture_Icon = self:FindComponent("n_FrontMsg/n_Texture_Icon", "UIEventGrayTexture")
    self.n_Sprite_BakRs = self:FindComponent("n_FrontMsg/n_Sprite_BakRs", "UISprite")
    self.n_Sprite_Lock = self:FindComponent("n_FrontMsg/n_Sprite_Lock", "UISprite")
    self.n_Label_Number = self:FindComponent("n_FrontMsg/Label_BuildNum/n_Label_Number", "UILabel")
    self.n_Label_Time = self:FindComponent("n_FrontMsg/n_Label_Time", "UILabel")
    self.n_btnMsg = self:FindComponent("n_FrontMsg/n_btnMsg", "UIButton")
    self.n_Sprite_Msg = self:FindComponent("n_FrontMsg/n_btnMsg/n_Sprite_Msg", "UISprite")
    self.n_Sprite_Bak = self:FindComponent("n_Sprite_Bak", "UISprite")
    self.n_Label_Name = self:FindComponent("n_Label_Name", "UILabel")

    self.View = {}
    table.insert(self.View, { DzName = self.n_Label_DzName01, Num = self.n_Label_Num01})
    table.insert(self.View, { DzName = self.n_Label_DzName02, Num = self.n_Label_Num02})
    table.insert(self.View, { DzName = self.n_Label_DzName03, Num = self.n_Label_Num03})
    table.insert(self.View, { DzName = self.n_Label_DzName04, Num = self.n_Label_Num04})
    table.insert(self.View, { DzName = self.n_Label_DzName05, Num = self.n_Label_Num05})

    local NLuaClickEvent = NLuaClickEvent.Get(self.n_btnMsg.gameObject)
    NLuaClickEvent:AddClick(self, self.ShowMsg)
end

function BuildingListListItem:OnClick()
    if self.data.openTip then
        self.data.openTip = false
        self.n_FrontMsg:SetActive(true)
        self.n_BackMsg:SetActive(false)
    else
        if self.count > 0 then
            if not self.isUnlock then
                OpenMessageBox(NotiConst.MessageBoxType.Tip,"请先解锁相关科技")
                return
            end

            if self.moreMaxCount then
                OpenMessageBox(NotiConst.MessageBoxType.Tip,"建筑数量大于科技限制，请先升级科技")
                return
            end

            Facade:SendNotification(NotiConst.Notify_BuildingListListItemChangeSelect, self.dataIndex)
        end
    end
end

function BuildingListListItem:DrawCell(index, cellIndex, itemsCount)
    self.dataIndex = cellIndex * itemsCount + index + 1
    self.data = self.planetaryProxy:GetBuildingPackageDataByIndex(self.dataIndex)
    self.configData = self.planetaryProxy:GetBuildingConifData(self.data.id)

    self.n_Label_Name.text = self.planetaryProxy:GetBuildingActualNameByName(self.configData.data[self.configData.EVar["bldg_name_s"]])
    self.n_Label_Time.text = self.configData.data[self.configData.EVar["time_cost_n"]]
    self.n_Label_Details01.text = self.data.id
    self.material = {}

    local cost_table = self.configData.data[self.configData.EVar["cost_table_repeated5"]]
    local count = 0
    for i,v in ipairs(cost_table) do
        if v[1] ~= nil and v[1] > 0 then
            local itemConfigData = self.storehouseProxy:GetItemConfigData(v[1])
            if itemConfigData ~= nil then
                count = count + 1
                local view = self.View[count]
                view.DzName.gameObject:SetActive(true)
                local name_s = itemConfigData.relation["name_s"]
                view.DzName.text = itemConfigData.data[itemConfigData.EVar[name_s]]
                view.Num.text = v[2]

                self.material[v[1]] = v[2]
            end
        end
    end

    count = count + 1
    for i = count,5 do
        self.View[i].DzName.gameObject:SetActive(false)
    end

    if self.data.openTip then
        self.n_FrontMsg:SetActive(false)
        self.n_BackMsg:SetActive(true)
    else
        self.n_FrontMsg:SetActive(true)
        self.n_BackMsg:SetActive(false)
    end

    self.nodeId = self.planetaryProxy:GetPlanetaryId()
    self.count = self:CalcCount()
    self.isUnlock = self.planetaryProxy:IsBuildingUnlockedByTech(self.data.id)
    self.moreMaxCount = self.planetaryProxy:IsBuildingCountMax(self.data.id)
    self.n_Label_Number.text = self.planetaryProxy:GetBuildingCount(self.configData.data[self.configData.EVar["bldg_func_type_n"]])..'/'..self.planetaryProxy:GetBuildingMax(self.data.id)

    self.n_Sprite_Lock.gameObject:SetActive(not self.isUnlock)

    if self.count > 0 then
        self.n_Texture_Icon:SetNormal()
    else
        self.n_Texture_Icon:SetGray()
    end
end

function BuildingListListItem:CalcCount()
    local maxCount = 99999999
    for i,v in pairs(self.material) do
        local itemData = self.storehouseProxy:GetItem(self.nodeId, i)
        if itemData == nil then
            maxCount = 0
            break
        end

        local count = math.floor(itemData.num/v)
        if count < maxCount then
            maxCount = count
        end

        if maxCount == 0 then
            break
        end
    end
    return maxCount
end

function BuildingListListItem:ShowMsg()
    self.data.openTip = true
    self.n_FrontMsg:SetActive(false)
    self.n_BackMsg:SetActive(true)
end

return BuildingListListItem