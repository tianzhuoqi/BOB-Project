//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NUIPanelContainerBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NUIPanelContainerBase), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("RegisterPanelByPrefabPath", RegisterPanelByPrefabPath);
		L.RegFunction("ChangePanelDepth", ChangePanelDepth);
		L.RegFunction("OpenUtilityPanel", OpenUtilityPanel);
		L.RegFunction("CloseUtilityPanel", CloseUtilityPanel);
		L.RegFunction("TopPanelName", TopPanelName);
		L.RegFunction("OverLayerPanel", OverLayerPanel);
		L.RegFunction("ReplacePanel", ReplacePanel);
		L.RegFunction("TapPanel", TapPanel);
		L.RegFunction("DestroyPanel", DestroyPanel);
		L.RegFunction("BackPanel", BackPanel);
		L.RegFunction("BackTwoPanel", BackTwoPanel);
		L.RegFunction("BackMorePanel", BackMorePanel);
		L.RegFunction("SetHomePagePoint", SetHomePagePoint);
		L.RegFunction("ReturnHomePage", ReturnHomePage);
		L.RegFunction("IsRunPanel", IsRunPanel);
		L.RegFunction("OldPanelHaveDirect", OldPanelHaveDirect);
		L.RegFunction("LoadWebByUrl", LoadWebByUrl);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterPanelByPrefabPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			obj.RegisterPanelByPrefabPath(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangePanelDepth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.ChangePanelDepth(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenUtilityPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.OpenUtilityPanel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUtilityPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.CloseUtilityPanel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TopPanelName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string o = obj.TopPanelName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverLayerPanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
				obj.OverLayerPanel();
				return 0;
			}
			else if (count == 2)
			{
				NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.OverLayerPanel(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NUIPanelContainerBase.OverLayerPanel");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplacePanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
				obj.ReplacePanel();
				return 0;
			}
			else if (count == 2)
			{
				NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.ReplacePanel(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NUIPanelContainerBase.ReplacePanel");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TapPanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
				obj.TapPanel();
				return 0;
			}
			else if (count == 2)
			{
				NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.TapPanel(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NUIPanelContainerBase.TapPanel");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			obj.DestroyPanel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BackPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			obj.BackPanel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BackTwoPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			obj.BackTwoPanel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BackMorePanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.BackMorePanel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHomePagePoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			obj.SetHomePagePoint();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnHomePage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			obj.ReturnHomePage();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRunPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsRunPanel(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OldPanelHaveDirect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			bool o = obj.OldPanelHaveDirect();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadWebByUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NUIPanelContainerBase obj = (NUIPanelContainerBase)ToLua.CheckObject<NUIPanelContainerBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.LoadWebByUrl(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

