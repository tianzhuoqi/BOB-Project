//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NTableViewWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NTableView), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("UseCellByIndex", UseCellByIndex);
		L.RegFunction("GetAllUseCell", GetAllUseCell);
		L.RegFunction("Init", Init);
		L.RegFunction("ScrollResetPosition", ScrollResetPosition);
		L.RegFunction("ResetState", ResetState);
		L.RegFunction("TableHeightChange", TableHeightChange);
		L.RegFunction("TableChange", TableChange);
		L.RegFunction("UpdateDrawCell", UpdateDrawCell);
		L.RegFunction("ScrollViewToIndex", ScrollViewToIndex);
		L.RegFunction("ScrollViewToPos", ScrollViewToPos);
		L.RegFunction("ScrollViewToDown", ScrollViewToDown);
		L.RegFunction("ToggleSubView", ToggleSubView);
		L.RegFunction("CloseSubViewAll", CloseSubViewAll);
		L.RegFunction("DeleteCell", DeleteCell);
		L.RegFunction("UpdateView", UpdateView);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_isNeedUpdate", get_m_isNeedUpdate, set_m_isNeedUpdate);
		L.RegVar("m_arragement", get_m_arragement, set_m_arragement);
		L.RegVar("m_scrollView", get_m_scrollView, set_m_scrollView);
		L.RegVar("m_panel", get_m_panel, set_m_panel);
		L.RegVar("m_tableData", get_m_tableData, set_m_tableData);
		L.RegVar("m_topMark", get_m_topMark, set_m_topMark);
		L.RegVar("m_downMark", get_m_downMark, set_m_downMark);
		L.RegVar("m_height", get_m_height, set_m_height);
		L.RegVar("TotalSize", get_TotalSize, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UseCellByIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NLuaListCellWidget o = obj.UseCellByIndex(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllUseCell(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			System.Collections.Generic.Dictionary<int,NLuaListCellWidget> o = obj.GetAllUseCell();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollResetPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.ScrollResetPosition();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.ResetState();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TableHeightChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.TableHeightChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TableChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.TableChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateDrawCell(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.UpdateDrawCell();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollViewToIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ScrollViewToIndex(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollViewToPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ScrollViewToPos(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollViewToDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.ScrollViewToDown();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToggleSubView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.ToggleSubView(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.ToggleSubView(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NTableView.ToggleSubView");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseSubViewAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
				obj.CloseSubViewAll();
				return 0;
			}
			else if (count == 2)
			{
				NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.CloseSubViewAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NTableView.CloseSubViewAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteCell(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.DeleteCell(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTableView obj = (NTableView)ToLua.CheckObject<NTableView>(L, 1);
			obj.UpdateView();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_isNeedUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			bool ret = obj.m_isNeedUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_isNeedUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_arragement(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			NTableView.EArragement ret = obj.m_arragement;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arragement on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_scrollView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UIScrollView ret = obj.m_scrollView;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_scrollView on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_panel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UIPanel ret = obj.m_panel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_panel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_tableData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			NLuaListViewWidget ret = obj.m_tableData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_tableData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_topMark(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UnityEngine.GameObject ret = obj.m_topMark;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_topMark on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_downMark(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UnityEngine.GameObject ret = obj.m_downMark;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_downMark on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			float ret = obj.m_height;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_height on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			int ret = obj.TotalSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_isNeedUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_isNeedUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_isNeedUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_arragement(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			NTableView.EArragement arg0 = (NTableView.EArragement)ToLua.CheckObject(L, 2, typeof(NTableView.EArragement));
			obj.m_arragement = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_arragement on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_scrollView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UIScrollView arg0 = (UIScrollView)ToLua.CheckObject<UIScrollView>(L, 2);
			obj.m_scrollView = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_scrollView on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_panel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UIPanel arg0 = (UIPanel)ToLua.CheckObject<UIPanel>(L, 2);
			obj.m_panel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_panel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_tableData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			NLuaListViewWidget arg0 = (NLuaListViewWidget)ToLua.CheckObject<NLuaListViewWidget>(L, 2);
			obj.m_tableData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_tableData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_topMark(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.m_topMark = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_topMark on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_downMark(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.m_downMark = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_downMark on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTableView obj = (NTableView)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_height = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_height on a nil value");
		}
	}
}

